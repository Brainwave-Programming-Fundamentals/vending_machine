# 관리자 로그인: admin_login 메소드로 관리자 비밀번호 확인.
# 상품 변경: change_item 메소드로 기존 상품을 새로운 상품으로 변경.
# 재고 채우기: restock_item 메소드로 특정 상품의 재고를 추가.
# 거스름돈 채우기: restock_moneybox 메소드로 특정 화폐 단위의 거스름돈을 추가.
# 영수증 출력: __print_receipt 메소드로 결제 후 영수증을 출력.
# "애녹 코드"에 위의 관리자 기능 추가.

from random import randint, choices
from string import digits
import pandas as pd
from faker import Faker  # 가짜 이름 라이브러리


class WithdrawError(Exception):  # 출금 에러 클래스
    def __init__(self, account, amount):
        self.account = account
        self.amount = amount

    def __str__(self):
        return f'insufficient balance: ' \
               f'balance is ￦{self.account.get_balance():,d} ' \
               f'but withdrawal amount is ￦{self.amount:,d}'


class PaymentError(Exception):
    def __init__(self, payment):
        self.payment = payment

    def __str__(self):
        return f'invalid payment method: {self.payment}'


class BankAccount:
    def __init__(self, name):
        self.__account_number = ''.join(choices(digits, k=13))
        self.__balance = 0  # 잔액
        self.name = name

    def __str__(self):
        return '이름: {:s}\n' \
               '계좌번호: {:0>4s}-{:s}-{:s}\n' \
               '잔액: ￦{:,d}'.format(
                self.name,
                self.__account_number[:-9],
                self.__account_number[-9:-7],
                self.__account_number[-7:],
                self.__balance)

    def get_balance(self):
        return self.__balance

    def deposit(self, amount):  # 입금
        self.__balance += amount

    def withdraw(self, amount):  # 출금
        if amount <= self.__balance:
            self.__balance -= amount
        else:
            raise WithdrawError(self, amount)


class Card:
    def __init__(self, account):
        self.__card_number = ''.join(choices(digits, k=16))
        self.__history = []  # 카드 사용 내역
        self.account = account  # 카드 소유주

    def __str__(self):
        return '카드번호: {}\n' \
               '↓ 소유주 정보 ↓\n' \
               '{}'.format(
                '-'.join([self.__card_number[i:i + 4] for i in range(0, 13, 4)]),
                self.account)


class VendingMachine:  # 자판기 클래스
    def __init__(self):
        item_list = [
            '글루텐-프리 에너지바',
            '글루텐-프리 어니언링',
            '글루텐-프리 크래커',
            '글루텐-프리 시리얼',
            '글루텐-프리 베이글',
            '글루텐-프리 감자칩',
            '글루텐-프리 쿠키',
            '할랄 소시지',
            '할랄 치킨',
            '할랄 케밥',
            '할랄 파이',
            '할랄 캔디'
        ]
        self.__items = pd.DataFrame(
            {item: [randint(10, 20), randint(7, 20) * 100] for item in item_list},
            index=['수량', '가격'])
        self.__items = self.__items.transpose()
        self.__moneybox = {
            10000: 0,
            5000: 0,
            1000: 100,
            500: 200,
            100: 500
        }

    def __str__(self):
        return str(self.__items)

    def buy(self):
        payment = input('결제 수단을 입력하세요. (현금 또는 카드): ')
        if payment == '현금':
            self.__buy_with_cash()
        elif payment == '카드':
            self.__buy_with_card()
        else:
            raise PaymentError(payment)

    def __buy_with_cash(self):
        raise NotImplementedError

    def __buy_with_card(self):
        raise NotImplementedError
        
    # 관리자 기능 추가
    def admin_login(self, password):
        # 관리자 비밀번호는 'admin'으로 설정
        if password == 'admin':
            return True
        else:
            print("잘못된 비밀번호입니다.")
            return False

    def admin_menu(self):
        while True:
            print("\n관리자 메뉴:")
            print("1. 상품 종류 변경")
            print("2. 재고 채우기")
            print("3. 거스름돈 채우기")
            print("4. 종료")
            choice = input("선택: ")

            if choice == '1':
                old_item = input("변경할 기존 상품명: ")
                new_item = input("새로운 상품명: ")
                new_price = int(input("새로운 상품 가격: "))
                new_quantity = int(input("새로운 상품 수량: "))
                self.change_item(old_item, new_item, new_price, new_quantity)
            elif choice == '2':
                item = input("재고를 추가할 상품명: ")
                quantity = int(input("추가할 재고 수량: "))
                self.restock_item(item, quantity)
            elif choice == '3':
                type_of_money = int(input("추가할 화폐 단위 (예: 1000): "))
                quantity = int(input(f"{type_of_money}원권 지폐/동전의 추가 수량: "))
                self.restock_moneybox(type_of_money, quantity)
            elif choice == '4':
                break
            else:
                print("잘못된 선택입니다.")

    def change_item(self, old_item, new_item, new_price, new_quantity):
        if old_item in self.__items.index:
            self.__items = self.__items.drop(index=old_item)
        self.__items.loc[new_item] = [new_quantity, new_price]
        print(f"상품 변경 완료: {old_item} -> {new_item}, 가격: ￦{new_price:,d}, 수량: {new_quantity}")

    def restock_item(self, item, quantity):
        if item in self.__items.index:
            self.__items.loc[item, '수량'] += quantity
            print(f"{item} 재고가 {quantity}개 추가되었습니다.")
        else:
            print("잘못된 상품입니다.")

    def restock_moneybox(self, denomination, quantity):
        if denomination in self.__moneybox:
            self.__moneybox[denomination] += quantity
            print(f"{denomination}원권 지폐/동전 {quantity}개가 추가되었습니다.")
        else:
            print("잘못된 화폐 단위입니다.")


card1 = Card(BankAccount(Faker('ko-KR').name()))
card1.account.deposit(randint(100, 999) * 1000)
print(card1)

vending_machine1 = VendingMachine()
print(vending_machine1)

# 관리자 모드 예제
admin_password = input("관리자 비밀번호를 입력하세요: ")
if vending_machine1.admin_login(admin_password):
    vending_machine1.admin_menu()

vending_machine1.buy()
